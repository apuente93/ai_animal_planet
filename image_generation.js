const { Configuration, OpenAIApi } = require("openai");
require('dotenv').config();
const request = require('request');
const sharp = require('sharp');

// Create a new OpenAI configuration
const config = new Configuration({
    apiKey: process.env.OPEN_AI_KEY;
});

// Create a new OpenAI API client
const openai = new OpenAIApi(config);

/*
Function that generates a prompt based on a prompt
    input: string prompt - prompt you want AI to generate
    output: string prompt - prompt generated by AI
*/
async function generatePrompt(textInput) {
    try{
        const response = await openai.createCompletion({
            prompt: textInput,
            model: "text-davinci-003",
            max_tokens: 3000,
        });

        return response.data.choices[0].text;
    } catch(error){
        console.log(error)
    }
}

/*
Function that generates an AI image based on a prompt 
    input: string prompt - prompt you want AI to generate
    output: string prompt - prompt generated by AI
*/
async function generateImage(textInput) {
    const response = await openai.createImage({
        prompt: textInput,
        n: 1,
        size: "1024x1024"
    });

    const pngUrl = response.data.data[0].url;

    return new Promise((resolve, reject) => {
      request.get(pngUrl, {encoding: null}, (error, response, body) => {
        if (error) {
          reject(error);
        } else if (response.statusCode !== 200) {
          reject(new Error(`Failed to fetch image with status code ${response.statusCode}`));
        } else {
          sharp(body)
            .toFormat('jpeg')
            .toBuffer()
            .then(data => {
              resolve(data);
            })
            .catch(err => {
              reject(err);
            });
        }
      });
    });
}


module.exports.generateImage = generateImage;
module.exports.generatePrompt = generatePrompt;